# 파일 위치: .github/workflows/deploy.yml
# 최종 버전: v2025.08.09-The-Final-Architecture
# 역할: 인프라와 콘텐츠 배포 책임을 모두 수행하는 단일 최종 파이프라인

name: "Build, Push, and Deploy Full-Stack Application"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  ECR_REPOSITORY: new-blog-frontend
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      # ===================================================================================
      # Phase 1 & 2: 환경 설정 및 애플리케이션 빌드 (변경 없음)
      # ===================================================================================
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with: { node-version: '22' }

      - name: "Setup pnpm"
        uses: pnpm/action-setup@v4
        with: { run_install: false }

      - name: "Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "Build Frontend"
        run: pnpm --filter frontend run build

      - name: "Build Backend"
        run: pnpm --filter backend run build

      # ===================================================================================
      # Phase 3: Docker 이미지 빌드 및 ECR 푸시 (변경 없음)
      # ===================================================================================
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Define Image Tag"
        id: image-def
        run: echo "TAG=$(date +%Y%m%d%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: "Build and push Docker image to ECR"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-def.outputs.TAG }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      # ===================================================================================
      # Phase 4: CDK를 통한 인프라 배포 ("오직 건설만")
      # ===================================================================================
      - name: "Deploy Infrastructure via CDK"
        id: cdk-deploy # [핵심] 이 단계에 ID를 부여하여, 결과물을 다음 단계에서 사용할 수 있도록 합니다.
        run: |
          # 배포 결과물을 outputs.json 파일로 저장합니다.
          pnpm --filter infra exec cdk deploy --all \
            --require-approval never \
            --outputs-file ./apps/infra/outputs.json \
            --parameters ImageTag=${{ steps.image-def.outputs.TAG }}

      # ===================================================================================
      # Phase 5: 콘텐츠 배포 ("화물 운송 및 마무리")
      # ===================================================================================
      
      - name: "Debug CDK Outputs"
        run: |
          echo "--- CDK outputs.json content ---"
          cat ./apps/infra/outputs.json | jq .
          echo "--------------------------------"
      
      - name: "Sync Static Assets to S3"
        run: |
          # cdk deploy의 결과물(outputs.json)에서 S3 버킷 이름을 읽어옵니다.
          ASSET_BUCKET_NAME=$(cat ./apps/infra/outputs.json | jq -r '.BlogInfraStack.FrontendAssetsBucketName')
          
          # 만약 버킷 이름을 읽어오지 못했다면, 파이프라인을 즉시 중단시킵니다.
          if [ -z "$ASSET_BUCKET_NAME" ] || [ "$ASSET_BUCKET_NAME" == "null" ]; then
            echo "::error::Failed to read S3 bucket name from CDK outputs."
            exit 1
          fi
          
          echo "Syncing ./apps/frontend/.next/static to bucket: $ASSET_BUCKET_NAME"
          # AWS CLI를 사용하여 빌드 결과물을 S3 버킷에 직접 업로드합니다.
          aws s3 sync ./apps/frontend/.next/static s3://${ASSET_BUCKET_NAME}/_next/static --delete

      - name: "Invalidate CloudFront Cache"
        run: |
          # cdk deploy의 결과물(outputs.json)에서 CloudFront 배포 ID를 읽어옵니다.
          DISTRIBUTION_ID=$(cat ./apps/infra/outputs.json | jq -r '.BlogInfraStack.CloudFrontDistributionId')

          if [ -z "$DISTRIBUTION_ID" ] || [ "$DISTRIBUTION_ID" == "null" ]; then
            echo "::error::Failed to read CloudFront distribution ID from CDK outputs."
            exit 1
          fi
          
          echo "Invalidating cache for distribution: $DISTRIBUTION_ID"
          # AWS CLI를 사용하여 CloudFront 캐시를 무효화하여, 사용자들이 즉시 최신 파일을 볼 수 있도록 합니다.
          aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"