# .github/workflows/deploy.yml (pnpm deploy 최종 진화 형태)

name: "Deploy Full-Stack Application to AWS"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Phase 1: Setup Environment"
        uses: actions/checkout@v4
      - name: Setup Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # ===================================================================================
      # Phase 2: Build, Package & Isolate Artifacts
      # ===================================================================================

      - name: "Clean up previous builds"
        run: pnpm run clean

      - name: "Isolate Frontend for Deployment using pnpm deploy"
        # [핵심] pnpm deploy는 build와 package를 포함한 모든 작업을 수행하고,
        # 배포에 필요한 모든 것(소스코드, production 의존성)을 'deploy-output' 폴더로 복사합니다.
        run: |
          mkdir deploy-output
          pnpm --filter frontend deploy --prod ./deploy-output

      - name: "Create Lambda Layer Zip File from Deployed Output"
        run: |
          echo "--- Zipping node_modules from pnpm deploy output ---"
          cd deploy-output
          zip -r ../node_modules.zip ./node_modules
          cd ..
      
      # ===================================================================================
      # Phase 3: Deploy to AWS
      # ===================================================================================

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Deploy Dependencies as a Lambda Layer"
        id: deploy-layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name new-blog-dependencies \
            --description "Frontend node_modules dependencies built on ${{ github.sha }}" \
            --zip-file fileb://node_modules.zip \
            --compatible-runtimes nodejs22.x \
            --query LayerVersionArn --output text)
          echo "layer_arn=${LAYER_ARN}" >> $GITHUB_OUTPUT

      - name: "Deploy Infrastructure and Application Code via CDK"
        run: pnpm --filter infra exec cdk deploy --all \
          --require-approval never \
          --parameters layerArn=${{ steps.deploy-layer.outputs.layer_arn }}