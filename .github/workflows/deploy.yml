# 파일 위치: .github/workflows/deploy.yml
# 최종 버전: v2025.08.09-Single-Source-of-Truth
# 역할: Dockerfile을 유일한 빌드 주체로 삼고, 그 결과물을 S3와 Lambda에 공급하는 최종 파이프라인

name: "Build, Push, and Deploy Full-Stack Application"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  ECR_REPOSITORY: new-blog-frontend
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      # ===================================================================================
      # Phase 1: 환경 설정 (변경 없음)
      # ===================================================================================
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with: { node-version: '22' }

      - name: "Setup pnpm"
        uses: pnpm/action-setup@v4
        with: { run_install: false }

      # ===================================================================================
      # Phase 2: Docker 이미지 빌드 및 결과물 추출 (핵심 수정)
      # ===================================================================================
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Define Image Tag"
        id: image-def
        run: echo "TAG=$(date +%Y%m%d%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      # [핵심 수정 1] 이 단계의 이름을 변경하여, 빌드, 푸시, 그리고 '추출'까지 담당함을 명시합니다.
      - name: "Build, Push Docker Image and Export Static Assets"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-def.outputs.TAG }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          # [핵심 수정 2] 빌드가 완료된 후, Docker 이미지의 특정 폴더 내용을
          # CI 실행 환경의 로컬 경로로 '꺼내옵니다(export)'.
          outputs: type=local,dest=./output

      # ===================================================================================
      # Phase 3: CDK를 통한 인프라 배포 (변경 없음)
      # ===================================================================================
      - name: "Install dependencies for CDK"
        run: pnpm install --frozen-lockfile

      - name: "Deploy Infrastructure via CDK"
        id: cdk-deploy
        run: |
          pnpm --filter infra exec cdk deploy --all \
            --require-approval never \
            --outputs-file ./apps/infra/outputs.json \
            --parameters ImageTag=${{ steps.image-def.outputs.TAG }}

      # ===================================================================================
      # Phase 4: 콘텐츠 배포 ("Docker가 만든 결과물" 사용)
      # ===================================================================================
      - name: "Sync Static Assets to S3"
        run: |
          ASSET_BUCKET_NAME=$(cat ./apps/infra/outputs.json | jq -r '.BlogInfraStack.FrontendAssetsBucketName')
          if [ -z "$ASSET_BUCKET_NAME" ] || [ "$ASSET_BUCKET_NAME" == "null" ]; then
            echo "::error::Failed to read S3 bucket name from CDK outputs."
            exit 1
          fi
          
          echo "Syncing exported static assets to bucket: $ASSET_BUCKET_NAME"
          # [핵심 수정 3] 소스 경로를, Docker 빌드에서 추출한 'output' 디렉토리 내부의
          # .next/static 폴더로 변경합니다.
          aws s3 sync ./output/apps/frontend/.next/static s3://${ASSET_BUCKET_NAME}/_next/static --delete

      - name: "Invalidate CloudFront Cache"
        run: |
          DISTRIBUTION_ID=$(cat ./apps/infra/outputs.json | jq -r '.BlogInfraStack.CloudFrontDistributionId')
          if [ -z "$DISTRIBUTION_ID" ] || [ "$DISTRIBUTION_ID" == "null" ]; then
            echo "::error::Failed to read CloudFront distribution ID from CDK outputs."
            exit 1
          fi
          
          echo "Invalidating cache for distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"