# .github/workflows/deploy.yml (modclean 적용 최종 완성본)

name: "Deploy Full-Stack Application to AWS"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Setup: Checkout, Node, pnpm & Cache"
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - uses: pnpm/action-setup@v4
        with:
          run_install: false
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: "Build: Clean, Build & Package Frontend"
        run: |
          pnpm run clean
          pnpm run package --no-cache

      - name: "Optimize: Isolate, Clean & Zip Layer"
        run: |
          mkdir deploy-output
          pnpm --filter frontend deploy --prod --legacy ./deploy-output || exit 1
          cd deploy-output
          npx modclean --patterns='**/*__tests__*/**,**/*.d.ts,**/*.map,**/*.md,**/LICENSE,**/license,**/license.txt' -n 'default:true,so:false'
          zip -r ../node_modules.zip ./node_modules
          cd ..

      - name: "Verify: Check Layer Size"
        run: du -h node_modules.zip

      - name: "Deploy: AWS Credentials, Layer & CDK"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_to_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - id: deploy-layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name new-blog-dependencies \
            --description "Frontend node_modules built on ${{ github.sha }}" \
            --zip-file fileb://node_modules.zip \
            --compatible-runtimes nodejs22.x \
            --query LayerVersionArn --output text)
          echo "layer_arn=${LAYER_ARN}" >> $GITHUB_OUTPUT
      - run: pnpm --filter infra exec cdk deploy --all \
          --require-approval never \
          --parameters layerArn=${{ steps.deploy-layer.outputs.layer_arn }}

      - name: "Cleanup: Remove Temporary Artifacts"
        if: always()
        run: rm -rf deploy-output node_modules.zip