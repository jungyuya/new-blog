# .github/workflows/deploy.yml (CDK 버전 명시 최종 완결본)

name: "Deploy Full-Stack Application to AWS"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Phase 1: Setup Environment"
        uses: actions/checkout@v4
      - uses: actions/setup-node@vv4
        with: { node-version: '22' }
      - uses: pnpm/action-setup@v4
        with: { run_install: false }
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies at root
        run: pnpm install --frozen-lockfile

      - name: "Install specific version of AWS CDK CLI"
        # [핵심] pnpm이 관리하는 버전 대신, npm을 통해 전역으로 CDK CLI를 설치합니다.
        # 우리의 aws-cdk-lib 버전과 동일한 버전을 사용하여, 버전 불일치 문제를 원천 차단합니다.
        run: npm install -g aws-cdk@2.207.0

      # ===================================================================================
      # Phase 2: Build All Workspaces
      # ===================================================================================

      - name: "Step 2.1: Clean previous artifacts"
        run: pnpm run clean

      - name: "Step 2.2: Build Backend"
        working-directory: ./apps/backend
        run: pnpm run build
      
      - name: "Step 2.3: Build Frontend"
        working-directory: ./apps/frontend
        run: pnpm run build  

      # ===================================================================================
      # Phase 3: Deploy to AWS
      # ===================================================================================

      - name: "Step 3.1: Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Get AWS Account ID
        id: get-aws-account-id
        run: echo "aws_account_id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: "Step 3.2: Bootstrap CDK with Trust Policy"
        # [핵심] 이제 pnpm exec 대신, 전역으로 설치된 최신 cdk를 직접 호출합니다.
        # working-directory를 infra로 지정하여, 올바른 cdk.json 컨텍스트에서 실행되도록 합니다.
        working-directory: ./apps/infra
        run: |
          cdk bootstrap \
            --trust ${{ steps.get-aws-account-id.outputs.aws_account_id }} \
            --cloudformation-execution-policies 'arn:aws:iam::aws:policy/AdministratorAccess'

      - name: "Step 3.3: Deploy Infrastructure and Application via CDK"
        # [핵심] 여기도 마찬가지로, 전역 cdk를 직접 호출합니다.
        working-directory: ./apps/infra
        run: cdk deploy --all --require-approval never