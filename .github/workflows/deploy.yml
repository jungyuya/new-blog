# .github/workflows/deploy.yml (컨테이너 기반 최종안)

name: "Deploy Full-Stack Application to AWS"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Phase 1: Setup Environment"
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '22' }
      - uses: pnpm/action-setup@v4
        with: { run_install: false }
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies at root
        run: pnpm install --frozen-lockfile

      # ===================================================================================
      # Phase 2: Build All Workspaces
      # ===================================================================================

      - name: "Step 2.1: Clean previous artifacts"
        run: pnpm run clean

      - name: "Step 2.2: Build Backend"
        working-directory: ./apps/backend
        run: pnpm run build
      
      - name: "Step 2.3: Build Frontend Static Assets"
        working-directory: ./apps/frontend
        run: pnpm run build  

      - name: "Step 2.4: Login to Amazon ECR"
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Build and push Docker image to ECR"
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: new-blog-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f apps/frontend/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: "Step 2.5: Deploy Infrastructure and Application via CDK"
        run: pnpm --filter infra exec cdk deploy --all --require-approval never \
          --parameters imageTag=${{ steps.build-image.outputs.image_tag }}

      # [핵심] 이제 프론트엔드 빌드는 CDK가 Docker 이미지를 생성하면서 수행하므로,
      # CI/CD 파이프라인에서 별도로 'pnpm run build'를 실행할 필요가 없습니다.
      # 모든 빌드 로직은 Dockerfile과 InfraStack.ts에 위임됩니다.

      # ===================================================================================
      # Phase 3: Deploy to AWS
      # ===================================================================================

      - name: "Step 3.1: Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Step 3.2: Login to Amazon ECR"
        id: login-ecr # [핵심] 다음 단계에서 registry 주소를 참조하기 위해 id를 추가합니다.
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Step 3.3: Build and push Docker image to ECR"
        id: build-image
        env:
          # [핵심] 이전 단계(login-ecr)의 출력값을 사용하여 ECR 주소를 동적으로 가져옵니다.
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: new-blog-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f apps/frontend/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: "Step 3.4: Deploy Infrastructure and Application via CDK"
        run: pnpm --filter infra exec cdk deploy --all --require-approval never \
          --parameters imageTag=${{ steps.build-image.outputs.image_tag }}

