# .github/workflows/deploy.yml (책임 분리 최종 완결본)

name: "Deploy Full-Stack Application to AWS"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Phase 1: Setup Environment"
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '22' }
      - uses: pnpm/action-setup@v4
        with: { run_install: false }
      - name: Install dependencies at root
        run: pnpm install --frozen-lockfile

      - name: "Phase 2: Build Prerequisite Assets"
        run: |
          pnpm run clean
          pnpm --filter backend run build
          pnpm --filter frontend run build

      # ===================================================================================
      # Phase 3: Build, Push Docker Image & Deploy to AWS
      # ===================================================================================

      - name: "Step 3.1: Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Step 3.2: Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Step 3.3: Build and push Docker image to ECR"
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: new-blog-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f apps/frontend/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: "Step 3.4: Deploy Infrastructure via CDK"
        # [핵심] ECR 저장소를 미리 수동으로 생성해야 합니다.
        # 또는 InfraStack에서 ecr.Repository를 사용하여 자동 생성할 수 있습니다.
        # 우리는 InfraStack에서 fromRepositoryName을 사용하므로, 수동 생성이 필요합니다.
        run: pnpm --filter infra exec cdk deploy --all --require-approval never \
          --parameters imageTag=${{ steps.build-image.outputs.image_tag }}