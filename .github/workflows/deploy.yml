# 파일 위치: .github/workflows/deploy.yml
# 최종 버전: v2025.08.08-AdaptToEnvironment
# 역할: x86_64 아키텍처로 통일된, 가장 단순하고 안정적인 최종 CI/CD 파이프라인

name: "Build, Push, Deploy, and Sync Full-Stack Application"

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: new-blog-frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      # ================== Phase 1 & 2: 설정 및 빌드 ==================
      - name: "Checkout & Setup"
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '22' }
      - uses: pnpm/action-setup@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter frontend run build
      - run: pnpm --filter backend run build

      # ================== Phase 3: Docker 빌드 및 ECR 푸시 ==================
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Login to ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: "Define Image Tag"
        id: image-def
        run: echo "TAG=$(date +%Ym%d%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
      
      # [핵심] 모든 고급 설정(QEMU, Buildx, Docker Hub Login, platforms, cache)을 제거하고,
      # Runner의 기본 환경을 사용하여 가장 단순하고 안정적으로 빌드합니다.
      - name: "Build and push Docker image"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-def.outputs.TAG }}
          provenance: false

      # ================== Phase 4 & 5: 인프라 건설 및 콘텐츠 배포 ==================
      - name: "Deploy Infrastructure via CDK"
        run: |
          pnpm --filter infra exec cdk deploy --all \
            --require-approval never \
            --outputs-file ./apps/infra/outputs.json \
            --parameters ImageTag=${{ steps.image-def.outputs.TAG }}

      - name: "Sync Assets and Invalidate Cache"
        run: |
          ASSET_BUCKET_NAME=$(cat ./apps/infra/outputs.json | jq -r '.BlogInfraStack.FrontendAssetsBucketName')
          DISTRIBUTION_ID=$(cat ./apps/infra/outputs.json | jq -r '.BlogInfraStack.CloudFrontDistributionId')
          aws s3 sync ./apps/frontend/.next/static s3://${ASSET_BUCKET_NAME}/_next/static --delete
          aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"