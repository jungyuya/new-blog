name: "Unified Deploy: CiCd + Blog (Optimized & Corrected)"

on:
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - 'scripts/**'
      - '.github/workflows/deploy.yml'
      - 'pnpm-lock.yaml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: new-blog-frontend

jobs:
  # ===================================================================================
  # JOB 1: 변경 감지
  # ===================================================================================
  detect_changes:
    name: "Detect Changed Paths"
    runs-on: ubuntu-latest
    outputs:
      blog: ${{ steps.paths.outputs.blog }}
      cicd: ${{ steps.paths.outputs.cicd }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Filter changed paths"
        id: paths
        uses: dorny/paths-filter@v3
        with:
          filters: |
            blog:
              - 'apps/frontend/**'
              - 'apps/backend/**'
              - 'apps/infra/lib/blog-stack.ts'
              - 'pnpm-lock.yaml'
            cicd:
              - 'apps/infra/lib/cicd-stack.ts'
              - 'scripts/setup_runner.sh'

  # ===================================================================================
  # JOB 2: CI/CD 인프라 배포
  # ===================================================================================
  deploy_cicd_infra:
    name: "Deploy CI/CD Infrastructure (CiCdStack)"
    needs: detect_changes
    if: ${{ needs.detect_changes.outputs.cicd == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Setup Node.js & pnpm"
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - uses: pnpm/action-setup@v4

      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Deploy CiCdStack via CDK"
        run: |
          pnpm --filter infra install --frozen-lockfile
          pnpm --filter infra exec cdk deploy CiCdStack --require-approval never

  # ===================================================================================
  # JOB 3: 블로그 애플리케이션 배포
  # ===================================================================================
  deploy_blog_app:
    name: "Build and Deploy Blog Application (Multi-stage Docker build - ultimate)"
    needs: [detect_changes, deploy_cicd_infra]
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read
      packages: write
    if: |
      always() &&
      (needs.detect_changes.outputs.blog == 'true' || github.event_name == 'workflow_dispatch')
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Configure AWS Credentials (from EC2 Role)"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}

      - name: "Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Define Image Tag"
        id: image-def
        run: echo "TAG=$(date +%Y%m%d%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      # ------------------------
      # 추가: GitHub Actions 로컬 캐시 복원 (안전 루트)
      # ------------------------
      - name: "Cache pnpm store"
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            ~/.cache/pnpm
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: "Cache turbo"
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('turbo.json') }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      # ------------------------
      # cache-to 분기: main 브랜치일 때만 registry로 캐시를 push
      # non-main에서는 registry로 캐시 푸시를 하지 않음 (중복 생성 방지 목적)
      # ------------------------
      - name: "Prepare cache-to variable"
        id: cachevar
        run: |
          echo "GITHUB_REF=${GITHUB_REF}"
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            echo "CACHE_TO=type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:cache,mode=max" >> $GITHUB_OUTPUT
          else
            # inline 방식으로 하면 buildx는 레지스트리 export 대신 빌더 내부 캐시(임시)만 사용합니다.
            echo "CACHE_TO=type=inline" >> $GITHUB_OUTPUT
          fi

      - name: "Build and push Docker image (multi-stage build) (uses buildx)"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-def.outputs.TAG }}
          platforms: linux/arm64
          provenance: false
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:cache
          cache-to: ${{ steps.cachevar.outputs.CACHE_TO }}

      - name: "Pull image locally for asset extraction"
        run: |
          IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-def.outputs.TAG }}"
          echo "Pulling image $IMAGE"
          docker pull "$IMAGE"
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

      - name: "Extract frontend assets from image (standalone, .next/static, public)"
        run: |
          set -euo pipefail
          IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-def.outputs.TAG }}"
          EXTRACT_NAME="extract-frontend-${{ steps.image-def.outputs.TAG }}"
          TMP_OUT="./_extracted_frontend"
          rm -rf "$TMP_OUT"
          mkdir -p "$TMP_OUT"

          CID=$(docker create --name "$EXTRACT_NAME" "$IMAGE")
          echo "Created container $CID for extraction"

          docker cp "${CID}:/app/.next" "$TMP_OUT/.next" || true
          docker cp "${CID}:/app/public" "$TMP_OUT/public" || true
          docker cp "${CID}:/app/standalone" "$TMP_OUT/standalone" || true

          docker rm -f "$CID" >/dev/null || true

          mkdir -p ./apps/frontend
          rm -rf ./apps/frontend/.next || true
          mv "$TMP_OUT/.next" ./apps/frontend/.next || true

          rm -rf ./apps/frontend/public || true
          mv "$TMP_OUT/public" ./apps/frontend/public || true

          rm -rf ./apps/frontend/.next/standalone || true
          mv "$TMP_OUT/standalone" ./apps/frontend/.next/standalone || true

          echo "Extraction complete. Sizes:"
          du -sh ./apps/frontend/.next || true
          du -sh ./apps/frontend/public || true

      # ------------------------
      # Setup Node & pnpm (필수)
      # ------------------------
      - name: "Setup Node.js & pnpm"
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - uses: pnpm/action-setup@v4

      # ------------------------
      # NEW: Install repository dependencies BEFORE CDK deploy
      # This ensures esbuild (CDK bundling) can resolve node_modules in the runner.
      # ------------------------
      - name: "Install repository dependencies (pnpm install)"
        run: |
          set -euo pipefail
          echo "Running pnpm install --frozen-lockfile at repository root..."
          pnpm install --frozen-lockfile

      # ------------------------
      # Deploy BlogInfraStack via CDK (pass ImageTag so infra can use pushed image)
      # ------------------------
      - name: "Deploy Blog Infrastructure (BlogInfraStack)"
        run: |
          set -euo pipefail
          pnpm --filter infra install --frozen-lockfile
          pnpm --filter infra exec cdk deploy BlogInfraStack \
            --require-approval never \
            --outputs-file "${{ github.workspace }}/apps/infra/outputs.json" \
            --parameters ImageTag=${{ steps.image-def.outputs.TAG }}

      - name: "Sync Static Assets to S3"
        run: |
          set -euo pipefail
          ASSET_JSON_PATH="${{ github.workspace }}/apps/infra/outputs.json"
          if [ ! -f "$ASSET_JSON_PATH" ]; then
            echo "::error::CDK output file not found at $ASSET_JSON_PATH"
            exit 1
          fi
          ASSET_BUCKET_NAME=$(node -p "require('$ASSET_JSON_PATH').BlogInfraStack.FrontendAssetsBucketName")
          echo "Syncing ./apps/frontend/.next/static -> s3://${ASSET_BUCKET_NAME}/_next/static"
          aws s3 sync ./apps/frontend/.next/static "s3://${ASSET_BUCKET_NAME}/_next/static" --delete
          echo "Syncing ./apps/frontend/public -> s3://${ASSET_BUCKET_NAME}/public"
          aws s3 sync ./apps/frontend/public "s3://${ASSET_BUCKET_NAME}/public" --delete

      - name: "Invalidate CloudFront Cache"
        run: |
          set -euo pipefail
          ASSET_JSON_PATH="${{ github.workspace }}/apps/infra/outputs.json"
          if [ ! -f "$ASSET_JSON_PATH" ]; then
            echo "::error::CDK output file not found at $ASSET_JSON_PATH"
            exit 1
          fi
          DISTRIBUTION_ID=$(node -p "require('$ASSET_JSON_PATH').BlogInfraStack.CloudFrontDistributionId")
          echo "Creating CloudFront invalidation for distribution ${DISTRIBUTION_ID}"
          aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"
