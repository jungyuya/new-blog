# .github/workflows/deploy.yml (캐시 비활성화 및 단순화 최종 완결본)

name: "Deploy Full-Stack Application to AWS"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Phase 1: Setup Environment"
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '22' }
      - uses: pnpm/action-setup@v4
        with: { run_install: false }

      # [핵심 1] 모든 문제의 근원인 pnpm 캐시 관련 단계를 완전히 주석 처리하여 비활성화합니다.
      # - name: Setup pnpm cache
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.pnpm-store
      #     key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-store-

      - name: "Install dependencies from scratch"
        # 캐시가 없으므로, pnpm은 모든 의존성을 인터넷에서 새로, 그리고 깨끗하게 다운로드합니다.
        run: pnpm install --frozen-lockfile

      # ===================================================================================
      # Phase 2: Build & Package
      # ===================================================================================

      - name: "Step 2.1: Clean and Build"
        run: |
          pnpm run clean
          pnpm run package --no-cache

      # [핵심] 모든 최적화 단계를 제거하고, 오직 순수한 standalone 결과물을 사용합니다.
      - name: "Step 2.2: Create Lambda Layer Zip File"
        run: |
          echo "--- Zipping the original standalone output ---"
          cd apps/frontend/.next/standalone
          zip -r ../../node_modules.zip .
          cd ../../../..

      - name: "Step 2.3: Verify Final Layer Zip Size"
        run: du -h apps/frontend/node_modules.zip 

      # ===================================================================================
      # Phase 3: Deploy to AWS
      # ===================================================================================

      - name: "Step 3.1: Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Step 3.2: Deploy Dependencies as a Lambda Layer"
        id: deploy-layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name new-blog-dependencies \
            --description "Frontend dependencies built on ${{ github.sha }}" \
            --zip-file fileb://apps/frontend/node_modules.zip \
            --compatible-runtimes nodejs22.x \
            --query LayerVersionArn --output text)
          echo "layer_arn=${LAYER_ARN}" >> $GITHUB_OUTPUT

      - name: "Step 3.3: Deploy Infrastructure and Application Code via CDK"
        run: pnpm --filter infra exec cdk deploy --all --require-approval never --parameters layerArn=${{ steps.deploy-layer.outputs.layer_arn }}

      - name: "Step 3.4 (Cleanup): Remove Temporary Artifacts"
        if: always()
        run: rm -f apps/frontend/node_modules.zip