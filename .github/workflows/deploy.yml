# .github/workflows/deploy.yml (Lambda Layer 적용 최종 완성본)

name: "Deploy Full-Stack Application to AWS"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Phase 1: Setup Environment"
        uses: actions/checkout@v4

      - name: Setup Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # ===================================================================================
      # Phase 2: Build & Package Artifacts
      # ===================================================================================

      - name: "Clean up previous builds"
        run: pnpm run clean

      - name: "Build Frontend (next build --standalone)"
        # 루트의 'build' 스크립트('turbo run build --filter=frontend')를 실행합니다.
        # 이 단계의 결과물은 '.next/standalone' 폴더입니다.
        run: pnpm run build --no-cache

      - name: "Package Frontend (open-next build)"
        # 루트의 'package' 스크립트('turbo run package --filter=frontend')를 실행합니다.
        # 이 단계는 '.next/standalone'을 입력으로 받아 '.open-next'를 생성합니다.
        run: pnpm run package --no-cache

      # [핵심 최종 수정] Layer 생성 단계를 최적화합니다.
      - name: "Create Optimized Lambda Layer Zip File"
        run: |
          echo "--- Optimizing node_modules for Lambda Layer ---"
          # 1. standalone 폴더로 이동합니다.
          cd apps/frontend/.next/standalone
          
          # 2. next build가 생성한 거대한 node_modules를 제거합니다.
          rm -rf node_modules

          # 3. standalone 폴더 안에 있는 package.json을 사용하여,
          #    오직 production 의존성만 새로, 그리고 깨끗하게 설치합니다.
          #    pnpm은 --prod 옵션을 통해 devDependencies를 완벽하게 제외합니다.
          pnpm install --prod

          # 4. 다이어트에 성공한, 가벼워진 node_modules를 압축합니다.
          echo "--- Zipping optimized node_modules ---"
          zip -r ../../node_modules.zip ./node_modules
          
          # 5. 원래 위치로 돌아옵니다.
          cd ../../../..
      
      # ===================================================================================
      # Phase 3: Deploy to AWS
      # ===================================================================================

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Deploy Dependencies as a Lambda Layer"
        id: deploy-layer # [핵심] 이 단계에 ID를 부여하여 출력값을 참조할 수 있도록 합니다.
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name new-blog-dependencies \
            --description "Frontend node_modules dependencies built on ${{ github.sha }}" \
            --zip-file fileb://apps/frontend/node_modules.zip \
            --compatible-runtimes nodejs22.x \
            --query LayerVersionArn --output text)
          echo "layer_arn=${LAYER_ARN}" >> $GITHUB_OUTPUT

      - name: "Deploy Infrastructure and Application Code via CDK"
        run: pnpm --filter infra exec cdk deploy --all \
          --require-approval never \
          --parameters layerArn=${{ steps.deploy-layer.outputs.layer_arn }}