# .github/workflows/deploy.yml (궁극의 최종 완결본 - 무결점 버전)

name: "Deploy Full-Stack Application to AWS"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Phase 1: Setup Environment"
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '22' }
      - uses: pnpm/action-setup@v4
        with: { run_install: false }
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies at root
        run: pnpm install --frozen-lockfile

      # ===================================================================================
      # Phase 2: Build, Package & Verify (in correct CWD)
      # ===================================================================================

      - name: "Step 2.1: Clean previous artifacts"
        run: pnpm run clean

      - name: "Step 2.2: Build Next.js standalone output"
        working-directory: ./apps/frontend
        run: pnpm run build

      - name: "Step 2.3 (Integrity Verification): Verify standalone output"
        run: |
          echo "--- Verifying .next/standalone integrity ---"
          (test -f apps/frontend/.next/standalone/server.js || test -f apps/frontend/.next/standalone/server.mjs) || (echo "!!! CRITICAL: server.js/mjs not found. !!!" && exit 1)
          test -d apps/frontend/.next/standalone/node_modules || (echo "!!! CRITICAL: node_modules directory not found. !!!" && exit 1)
          echo "Standalone output verified successfully."

      - name: "Step 2.4: Package with open-next and save log"
        working-directory: ./apps/frontend
        # [개선] tee를 사용하여, 화면과 파일에 동시에 로그를 출력합니다.
        run: pnpm open-next build | tee ../../open-next.log

      - name: "Step 2.5 (Integrity Verification): Verify .open-next artifact"
        run: |
          echo "--- Verifying .open-next integrity ---"
          test -f apps/frontend/.open-next/server-functions/default/index.mjs || (echo "!!! CRITICAL: index.mjs not found. !!!" && exit 1)
          # [개선] 정적 에셋 폴더의 존재까지 검증하여 안정성을 높입니다.
          test -d apps/frontend/.open-next/assets/_next || (echo "!!! CRITICAL: assets/_next directory not found. !!!" && exit 1)
          echo ".open-next artifact verified successfully."

      - name: "Step 2.6: Create and Verify Lambda Layer Zip File"
        run: |
          echo "--- Zipping node_modules from standalone output ---"
          cd apps/frontend/.next/standalone
          zip -r ../../node_modules.zip ./node_modules
          cd ../../../..
          
          echo "--- Final size of the Lambda Layer zip ---"
          du -h apps/frontend/node_modules.zip
          
          # [개선] AWS의 실제 압축 후 한계인 50MiB로 기준을 강화합니다.
          MAX_SIZE=52428800
          ACTUAL_SIZE=$(stat -c %s apps/frontend/node_modules.zip)
          if [ "$ACTUAL_SIZE" -ge "$MAX_SIZE" ]; then
            echo "::error::Layer zip size ($ACTUAL_SIZE bytes) exceeds AWS Lambda Layer limit ($MAX_SIZE bytes)."
            exit 1
          fi
          echo "Layer size is within the limit."

      # ===================================================================================
      # Phase 3: Deploy to AWS
      # ===================================================================================
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Deploy Dependencies as a Lambda Layer"
        id: deploy-layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name new-blog-dependencies \
            --description "Frontend dependencies built on ${{ github.sha }}" \
            --zip-file fileb://apps/frontend/node_modules.zip \
            --compatible-runtimes nodejs22.x \
            --compatible-architectures arm64 \
            --query LayerVersionArn --output text)
          echo "layer_arn=${LAYER_ARN}" >> $GITHUB_OUTPUT

      - name: "Deploy Infrastructure and Application Code via CDK"
        run: pnpm --filter infra exec cdk deploy --all --require-approval never --parameters layerArn=${{ steps.deploy-layer.outputs.layer_arn }}

      - name: "Upload build logs as artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: open-next-log
          path: open-next.log

      - name: "Clean up temporary build artifacts"
        if: always()
        run: |
          rm -f apps/frontend/node_modules.zip
          rm -f open-next.log