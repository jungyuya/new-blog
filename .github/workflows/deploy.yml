# 파일 위치: .github/workflows/deploy.yml
# 수정 버전: v2025.08.08-UnifiedRole-Debug

name: "Build, Push, Deploy, and Sync Full-Stack Application"

on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: new-blog-frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      # ===================================================================================
      # Phase 1 & 2: 환경 설정 및 애플리케이션 빌드 (변경 없음)
      # ===================================================================================
      - name: "Checkout & Setup"
        uses: actions/checkout@v4
      - name: "Setup Node.js v22"
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: "Setup pnpm"
        uses: pnpm/action-setup@v4
      - name: "Install dependencies"
        run: pnpm install --frozen-lockfile
      - name: "Build Frontend for S3 Assets"
        run: pnpm --filter frontend run build
      - name: "Build Backend for Validation"
        run: pnpm --filter backend run build

      # ===================================================================================
      # Phase 3 & 4: AWS 인증, 빌드, 푸시, 인프라 배포 (단일 역할 사용)
      # ===================================================================================
      - name: "Configure AWS Credentials (Unified Role)"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # [핵심 수정] 파이프라인 전체에서 단 하나의 역할만 사용합니다.
          # 이 역할은 ECR, CDK, S3, CloudFront에 대한 모든 권한을 가지고 있어야 합니다.
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: "Define unique Image Tag"
        id: image-def
        run: echo "TAG=$(date +%Y%m%d%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
      
      - name: "Build and push Docker image to ECR"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-def.outputs.TAG }}
          platforms: linux/amd64
          provenance: false

      - name: "Deploy Infrastructure via CDK"
        run: |
          pnpm --filter infra exec cdk deploy --all \
            --require-approval never \
            --outputs-file ./apps/infra/outputs.json \
            --parameters ImageTag=${{ steps.image-def.outputs.TAG }}

      # ===================================================================================
      # Phase 5: 콘텐츠 배포 (동일한 역할 사용)
      # ===================================================================================
      # [핵심 수정] 별도의 역할 전환(Configure AWS Credentials) 단계를 삭제했습니다.
      # 바로 위에서 인증받은 동일한 역할의 권한을 그대로 이어받아 사용합니다.
      
      - name: "Verify Current AWS Identity"
        run: |
          echo "Verifying the identity for the content deployment step..."
          aws sts get-caller-identity

      - name: "Sync Static Assets and Invalidate CloudFront Cache"
        run: |
          ASSET_BUCKET_NAME=$(cat ./apps/infra/outputs.json | jq -r '.BlogInfraStack.FrontendAssetsBucketName')
          DISTRIBUTION_ID=$(cat ./apps/infra/outputs.json | jq -r '.BlogInfraStack.CloudFrontDistributionId')

          # 만약 cdk deploy가 실패했다면, 여기서 파이프라인이 멈추도록 방어 코드를 추가합니다.
          if [ "$ASSET_BUCKET_NAME" == "null" ] || [ "$DISTRIBUTION_ID" == "null" ]; then
            echo "::error::Failed to read outputs from cdk deploy. Halting execution."
            exit 1
          fi

          echo "Syncing ./apps/frontend/.next/static to bucket: $ASSET_BUCKET_NAME"
          aws s3 sync ./apps/frontend/.next/static s3://${ASSET_BUCKET_NAME}/_next/static --delete

          echo "Invalidating cache for distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"