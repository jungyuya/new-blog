# .github/workflows/deploy.yml (컨테이너 기반 최종안)

name: "Deploy Full-Stack Application to AWS"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Phase 1: Setup Environment"
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '22' }
      - uses: pnpm/action-setup@v4
        with: { run_install: false }
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies at root
        run: pnpm install --frozen-lockfile

      # ===================================================================================
      # Phase 2: Build All Workspaces
      # ===================================================================================

      - name: "Step 2.1: Clean previous artifacts"
        run: pnpm run clean

      - name: "Step 2.2: Build Backend"
        working-directory: ./apps/backend
        run: pnpm run build

      # [핵심] 이제 프론트엔드 빌드는 CDK가 Docker 이미지를 생성하면서 수행하므로,
      # CI/CD 파이프라인에서 별도로 'pnpm run build'를 실행할 필요가 없습니다.
      # 모든 빌드 로직은 Dockerfile과 InfraStack.ts에 위임됩니다.

      # ===================================================================================
      # Phase 3: Deploy to AWS
      # ===================================================================================

      - name: "Step 3.1: Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Step 3.2: Deploy Infrastructure and Application via CDK"
        # [핵심] 이제 CDK deploy 명령어 하나가 모든 것을 처리합니다.
        # 1. apps/frontend/Dockerfile을 읽어 Docker 이미지를 빌드합니다.
        # 2. 빌드된 이미지를 ECR에 푸시합니다.
        # 3. 백엔드 Lambda 코드를 번들링합니다.
        # 4. 모든 인프라(Lambda, S3, CloudFront 등)를 생성/업데이트합니다.
        # 5. apps/frontend/.next/static 폴더의 내용을 S3에 업로드합니다.
        run: pnpm --filter infra exec cdk deploy --all --require-approval never

      # [핵심] 더 이상 Lambda Layer나 임시 zip 파일이 없으므로, Cleanup 단계가 필요 없습니다.