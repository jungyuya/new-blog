# .github/workflows/deploy.yml (모든 지혜를 담은 최종 완결본)

name: "Deploy Full-Stack Application to AWS"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Phase 1: Setup Environment"
        uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '22' }
      - uses: pnpm/action-setup@v4
        with: { run_install: false }
      - uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # ===================================================================================
      # Phase 2: Build, Package & Optimize Artifacts
      # ===================================================================================

      - name: "Step 2.1: Clean Artifacts & Forcefully Disable Turbo Cache"
        run: |
          rm -rf .turbo
          pnpm run clean

      - name: "Step 2.2: Build and Package Frontend"
        run: pnpm run package --no-cache

      - name: "Step 2.3: Isolate, Clean, Zip Layer & Verify"
        run: |
          echo "--- Isolating frontend artifacts for deployment ---"
          mkdir deploy-output
          pnpm --filter frontend deploy --prod --legacy ./deploy-output || exit 1
          
          echo "--- Optimizing node_modules with modclean ---"
          cd deploy-output
          npx modclean --patterns='**/*__tests__*/**,**/*.d.ts,**/*.map,**/*.md,**/LICENSE,**/license,**/license.txt' -n 'default:true,so:false'

          # [개선] modclean 결과 확인 로그 추가
          echo "--- node_modules size after modclean ---"
          du -sh node_modules

          echo "--- Zipping the cleaned node_modules ---"
          zip -r ../node_modules.zip ./node_modules
          cd ..

          echo "--- Final size of the optimized node_modules.zip ---"
          du -h node_modules.zip

          # [개선] 최종 zip 크기가 67MiB 초과 시 파이프라인을 즉시 실패시킵니다.
          MAX_SIZE=70167211
          ACTUAL_SIZE=$(stat -c %s node_modules.zip)
          if [ "$ACTUAL_SIZE" -ge "$MAX_SIZE" ]; then
            echo "::error::Layer zip size ($ACTUAL_SIZE bytes) exceeds AWS Lambda Layer limit ($MAX_SIZE bytes)."
            exit 1
          fi

      # ===================================================================================
      # Phase 3: Deploy to AWS
      # ===================================================================================

      - name: "Step 3.1: Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Step 3.2: Deploy Dependencies as a Lambda Layer"
        id: deploy-layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name new-blog-dependencies \
            --description "Frontend node_modules built on ${{ github.sha }}" \
            --zip-file fileb://node_modules.zip \
            --compatible-runtimes nodejs22.x \
            --query LayerVersionArn --output text)
          echo "layer_arn=${LAYER_ARN}" >> $GITHUB_OUTPUT

      - name: "Step 3.3: Deploy Infrastructure and Application Code via CDK"
        run: pnpm --filter infra exec cdk deploy --all \
          --require-approval never \
          --parameters layerArn=${{ steps.deploy-layer.outputs.layer_arn }}

      - name: "Step 3.4 (Cleanup): Remove Temporary Artifacts"
        if: always()
        run: rm -rf deploy-output node_modules.zip