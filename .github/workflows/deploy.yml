# .github/workflows/deploy.yml (모든 불일치 제거 최종 완성본)

name: "Deploy Full-Stack Application to AWS"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          # [최종 수정] version 키를 완전히 제거하여, package.json의 packageManager를 따르도록 합니다.
          run_install: false

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # [최종 수정] pnpm을 통해 clean 스크립트를 실행하여 'command not found' 오류를 해결합니다.
      - name: Clean up previous build artifacts
        run: pnpm run clean

      # [최종 수정] pnpm을 통해 build 스크립트를 실행합니다. 이 한 줄이 모든 빌드/패키징을 조율합니다.
      - name: Build and Package All Apps via Turbo
        run: pnpm run build --no-cache

      # [최종 수정] cdk deploy 직전에, 최종 결과물인 .open-next 폴더의 존재를 물리적으로 확인합니다.
      - name: Verify Build Artifacts
        run: |
          echo "--- Verifying the presence of the final artifact: .open-next ---"
          ls -laR apps/frontend/.open-next

      # [최종 수정] 모든 것이 준비된 후, pnpm을 통해 cdk deploy를 실행합니다.
      - name: Deploy Infrastructure to AWS
        run: pnpm --filter infra exec cdk deploy --all --require-approval never