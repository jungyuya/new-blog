# 파일 위치: .github/workflows/deploy.yml
# 최종 수정일: 2025년 8월 6일 0422 (Buildx 드라이버 업그레이드 적용)
# 역할: 책임 분리 원칙 + Buildx 캐싱 최적화가 적용된 최종 파이프라인

name: "Build, Push, and Deploy Full-Stack Application"

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  ECR_REPOSITORY: new-blog-frontend
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      # ===================================================================================
      # Phase 1 & 2: 환경 설정 및 애플리케이션 빌드 (변경 없음)
      # ===================================================================================
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with: { node-version: '22' }

      - name: "Setup pnpm"
        uses: pnpm/action-setup@v4
        with: { run_install: false }

      - name: "Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "Clean previous artifacts"
        run: pnpm run clean

      - name: "Build Frontend for S3 Assets"
        run: pnpm --filter frontend run build

      - name: "Build Backend for Validation"
        run: pnpm --filter backend run build

      # ===================================================================================
      # Phase 3: Docker 이미지 빌드 및 ECR 푸시 (Buildx 업그레이드 적용)
      # ===================================================================================
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Login to Amazon ECR"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # [핵심 수정] docker/build-push-action이 고급 캐싱 기능을 사용할 수 있도록
      # Buildx 드라이버를 설정하는 단계를 추가합니다.
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Define Image Tag (송장 번호 생성)"
        id: image-def
        run: echo "TAG=$(date +%Y%m%d%H%M%S)-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: "Build and push Docker image to ECR"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.image-def.outputs.TAG }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # [핵심 최종 수정] 이미지 매니페스트 출력 형식을 명시적으로 지정합니다.
          # Lambda가 확실하게 지원하는 Docker 표준 형식(V2, Schema 2)으로 포장 규격을 고정합니다.
          provenance: false

      # ===================================================================================
      # Phase 4: CDK를 통한 인프라 배포 (변경 없음)
      # ===================================================================================
      - name: "Bootstrap CDK"
        run: pnpm --filter infra exec cdk bootstrap

      - name: "Deploy to AWS via CDK (송장 번호 전달)"
        run: |
          pnpm --filter infra exec cdk deploy --all \
            --require-approval never \
            --parameters ImageTag=${{ steps.image-def.outputs.TAG }}