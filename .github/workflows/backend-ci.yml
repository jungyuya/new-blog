# .github/workflows/backend-ci.yml (최종 수정 제안)
name: Backend CI (Build & Upload Lambda Artifact)

on:
  push:
    branches:
      - main
    paths:
      - 'apps/backend/**' # backend 코드 변경 시 트리거
      - 'pnpm-workspace.yaml'
      - 'pnpm-lock.yaml'

jobs:
  build_and_upload:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC를 위한 권한
      contents: read
    env:
      AWS_REGION: ap-northeast-2
      # Job 레벨에서 ARTIFACT_BUCKET_NAME을 올바르게 정의했습니다.
      ARTIFACT_BUCKET_NAME: blog-lambda-artifacts-${{ secrets.AWS_ACCOUNT_ID }}-${{ env.AWS_REGION }} 
      
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile # CI에서는 lockfile이 변경될 수 있으므로 --no-frozen-lockfile 사용

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsCDKDeployRole # S3 업로드 권한이 있는 역할
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Lambda Code
        run: pnpm --filter backend build # backend 워크스페이스 빌드

      - name: Zip Lambda Artifact
        working-directory: ./apps/backend # apps/backend 디렉토리로 이동
        run: zip -r backend.zip dist # dist 폴더를 backend.zip으로 압축

      - name: Upload Lambda Artifact to S3
        # 이 스텝에서는 job 레벨의 환경 변수 (ARTIFACT_BUCKET_NAME)를 바로 사용합니다.
        # 별도의 'env' 블록을 이곳에 추가하지 않습니다.
        working-directory: ./apps/backend
        run: |
          LAMBDA_ARTIFACT_PATH="backend.zip" # 앞에서 생성된 backend.zip
          LAMBDA_ARTIFACT_KEY="backend/${{ github.sha }}.zip" # CDK에서 참조하는 키 형식
          
          if [ ! -f "$LAMBDA_ARTIFACT_PATH" ]; then
            echo "Error: Lambda artifact not found at $LAMBDA_ARTIFACT_PATH. Build step might have failed or path is incorrect."
            exit 1
          fi

          aws s3 cp "${LAMBDA_ARTIFACT_PATH}" "s3://${{ env.ARTIFACT_BUCKET_NAME }}/${LAMBDA_ARTIFACT_KEY}"